% set me up cuh 

clear

% inertia matrix
J = diag([1;2;3]);
R = expm(hat(deg2rad([5;4;-6])));
J = R*J*R';

% reaction wheel jacobian
B_sc = eye(3);


% linear momentum coupling matrix
phi = [0 1 0;...
       1 0 0;
       0 .2 -.8];
 
% angular momentum coupling matrix
delta = [0 0 1;...
         0 1 0
        -.7 .1 .1];
    
% store this matrix for faster computations
T = inv(J-delta'*delta);

j = 3; % 3 modes

% damping and stiffness
zeta = [.001;.001;.001];
Delta = [.05; .2; .125] * (2*pi);

% damping and stiffness matrices 
C = zeros(j,j);
K = zeros(j,j);
for i =1:j
    C(i,i) = 2*zeta(i)*Delta(i);
    K(i,i) = Delta(i)^2;
end


           %   mrp        w                  n                       ndot 
pdot_row = [zeros(3,3) .25*eye(3)       zeros(3,j)                 zeros(3,j)];
wdot_row = [zeros(3,3) zeros(3,3)     T*delta'*K                  T*delta'*C];
ndot_row = [zeros(j,3) zeros(j,3)     zeros(j,j)                  eye(j)];
nddot_row = [zeros(j,3) zeros(j,3) (-K - delta*T*delta'*K)    (-C - delta*T*delta'*C)];

% analytical A
A_analytical = [pdot_row;wdot_row;ndot_row;nddot_row];

% analytical B
B_analytical = [zeros(3,3);
          -T*B_sc;
          zeros(j,3);
          delta*T*B_sc];

      
dt = .5;
[Ad, Bd] = c2d(A_analytical,B_analytical,dt);
[~, B_affine] = c2d(A_analytical,eye(size(Bd,1)),dt);
      

% LQR Controller 
p = 100;
d = 30;
n = 1;
ndot = 1;
r = 5;

K_lqr = LQR_spacecraft(inv(T),B_sc,p,d,r,dt);

Q = diag([p;p;p;d;d;d;n;n;n;ndot;ndot;ndot]);
R = diag([r;r;r]);

K_lqr2 = dlqr(Ad,Bd,Q,R);

sc.J = J;
sc.invJ = inv(J);
sc.B = B_sc;
sc.phi = phi;
sc.delta = delta;
sc.C = C;
sc.K = K;
sc.T = T;
sc.n_modes = j;


save A_and_B_3modes.mat Ad Bd K_lqr K_lqr2 B_affine dt sc

      
      



%%
% 
% tf = 20;
% dt = .5;
% t_vec = 0:dt:tf;
% 
% X = zeros(11,length(t_vec));
% 
% X(:,1) = zeros(11,1);
% X(1:3,1) = deg2rad([1;2;3])/4;
% 
% % controller
% p = 100;
% d = 30;
% r = .1;
% 
% K = LQR_spacecraft(J,B_sc,p,d,r,dt);
% 
% u_hist = zeros(3,length(t_vec)-1);
% 
% 
% 
% 
% 
% 
% %%
% umax = .01;
% tf = 100;
% dt = .01;
% t_vec = 0:dt:tf;
% 
% % opts = odeset('RelTol',1e-8,'AbsTol',1e-8);
% X = zeros(11,length(t_vec));
% for k = 1:length(t_vec)-1
%     
%     
% %     if k < 5
% %         u.a = zeros(3,1);
% %         u.rdot = zeros(3,1);
% %         u.tau = [1;0;0];
% %     else
% %         u.a = zeros(3,1);
% %         u.rdot = zeros(3,1);
% %         u.tau = zeros(3,1);
% %     end
% %     
% %     u.a = zeros(3,1);
% %     u.tau = zeros(3,1);
% %     u.rdot = .01*clamp(-K*X(1:6,k),-umax,umax);
% %     u_hist(:,k) = u.rdot;
%     U(:,k) = clamp(-K_lqr*X(1:6,k),-umax,umax);
%     X(:,k+1) = rk4(@ODE,t_vec(k),X(:,k),U(:,k),sc,dt);
% %     t = t_vec(k);
% %     
% %     [t,Y] = ode15s(@(t,x) ODE(t,x,u,sc),(0:.01:dt),X(:,k),opts);
% %     y = Y(end,:)';
% %     p = y(1:3);
% %     % norm squared
% %     dp2 = dot(p,p);
% % 
% %     % if exceeds unity, swap to shadow MRP
% %     if dp2 > 1.0
% %         ps = -p/dp2;
% %         y(1:3) = ps;
% %     end
% %     X(:,k+1) = y;
% end
% 
% figure
% hold on 
% plot(U')
% hold off 
% %% 
% % rk4(ODE,tn,xn,u,sc,h)
% 
% phi_hist = zeros(3,length(t_vec));
% for i = 1:length(t_vec)
%     phi_hist(:,i) = phi_from_p(X(1:3,i));
% end
% 
%     
% figure
% hold on 
% title('MRP')
% plot(t_vec,X(1:3,:)')
% hold off 
% 
% figure
% hold on 
% title('Axis Angle')
% plot(t_vec,rad2deg(phi_hist)')
% hold off 
% 
% figure
% hold on 
% title('Angular Velocity')
% plot(t_vec,X(4:6,:)')
% hold off 
% 
% figure
% hold on 
% title('Modal Coordinate')
% plot(t_vec,X(7,:))
% hold off 
% 
% figure
% hold on 
% title('Control Wheel Acceleration')
% plot(t_vec(1:end-1),u_hist')
% hold off 
% 
% 
% 
% 
% 
function xdot = ODE(t,x,u,sc)

p    = x(1:3);
w    = x(4:6);
n    = x(7);
ndot = x(8);
r    = x(9:11);

% tau = u.tau;
% a = u.a; 
% rdot = u.rdot;
if t>= 7.0 && t <=7.4
        tau = [.1;.1;.1];
        a   = [.1;.1;.1];
else
        tau = [0.0;0.0;0.0];
        a   = [0.0;0.0;0.0];
end

wdot = sc.T*(tau - sc.B*u  - ...
        cross(w,sc.J*w + sc.delta'*ndot + sc.B*r) +...
        sc.delta'*(sc.C*ndot + sc.K*n + sc.phi*a));

pdot = pdot_from_w(p,w);

nddot = -sc.delta*wdot -sc.C*ndot - sc.K*n - sc.phi*a;

xdot = [pdot;wdot;ndot;nddot;u];


end





function [A_d, B_d] = c2d(A,B,dt)
    n = size(A,1);
    p = size(B,2);

    expAB = expm([A*dt B*dt; zeros(p,n+p)]);

    A_d = expAB(1:n,1:n);
    B_d = expAB(1:n,(n+1):end);


end

function y = clamp(x,bl,bu)
  % return bounded value clipped between bl and bu
  y=min(max(x,bl),bu);
end

function [y_np1] = rk4(ODE,tn,xn,u,sc,h)
% rk4 for a single step 

xn = xn(:);

k1 = h*ODE(tn,xn,u,sc);
k2 = h*ODE(tn + h/2,xn + k1/2,u,sc);
k3 = h*ODE(tn + h/2,xn + k2/2,u,sc);
k4 = h*ODE(tn + h,xn + k3,u,sc);

y_np1 = xn + (1/6)*(k1 + 2*k2 + 2*k3 + k4);

% MRP handling here 
p = y_np1(1:3);

% norm squared
dp2 = dot(p,p);

% if exceeds unity, swap to shadow MRP
if dp2 > 1.0
    ps = -p/dp2;
    y_np1(1:3) = ps;
end



end


function K = LQR_spacecraft(J,B_sc,p,d,r,dt)

A = [zeros(3,3) .25*eye(3);
     zeros(3,6)];
 
B = [zeros(3,3);
     -inv(J)*B_sc];
 
[~,nu] = size(B);
% dt = .5;

[Ad, Bd] = c2d(A,B,dt);

% p = 100;
% d = 30;

Q =  diag([p;p;p;d;d;d]);
R = r*eye(nu);


K = dlqr(Ad,Bd,Q,R);

end

